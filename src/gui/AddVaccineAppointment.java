/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import javax.swing.*;
import java.io.*;
import java.util.*;
import java.util.regex.Pattern;
/**
 *
 * @author choww
 */
public class AddVaccineAppointment extends javax.swing.JFrame {

    /**
     * Creates new form AddVaccineAppointment
     */
    public AddVaccineAppointment() {
        initComponents();
        ICLabel.setVisible(false);
        ICTxt.setVisible(false);
        PassportLabel.setVisible(false);
        PassportTxt.setVisible(false);
        SearchBut.setVisible(false);
        NameTxt.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ICTxt = new javax.swing.JTextField();
        VaccineType = new javax.swing.JComboBox<>();
        VaccineCentre = new javax.swing.JComboBox<>();
        AppointTime = new javax.swing.JComboBox<>();
        ICLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        AddBut = new javax.swing.JButton();
        BackBut = new javax.swing.JButton();
        ExitBut = new javax.swing.JButton();
        AppointDateChooser = new com.toedter.calendar.JDateChooser();
        CitizenshipChoice = new javax.swing.JComboBox<>();
        SelectBut = new javax.swing.JButton();
        CitizenshipTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        PassportLabel = new javax.swing.JLabel();
        PassportTxt = new javax.swing.JTextField();
        SearchBut = new javax.swing.JButton();
        ClearBut = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        NameTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Add Vaccine Appointment");

        VaccineType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pfizer", "Sinovac", "AstraZeneca", "Sputnik V", "CanSinoBio" }));

        VaccineCentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kuala Lumpur", "Bukit Jalil", "Shah Alam", "Sungai Buloh", "Subang Jaya" }));

        AppointTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800", "1900" }));

        ICLabel.setText("NRIC");

        jLabel3.setText("Vaccine Type");

        jLabel4.setText("Vaccine Centre");

        jLabel5.setText("Appointment Date ");

        jLabel6.setText("Appointment Time");

        AddBut.setText("Add");
        AddBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButActionPerformed(evt);
            }
        });

        BackBut.setText("Back");
        BackBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButActionPerformed(evt);
            }
        });

        ExitBut.setText("Exit");
        ExitBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButActionPerformed(evt);
            }
        });

        AppointDateChooser.setDateFormatString("dd/MM/yyyy");

        CitizenshipChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Citizen", "Non-Citizen" }));
        CitizenshipChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CitizenshipChoiceActionPerformed(evt);
            }
        });

        SelectBut.setText("Select");
        SelectBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectButActionPerformed(evt);
            }
        });

        jLabel8.setText("Citizenship");

        PassportLabel.setText("Passport No.");

        SearchBut.setText("Search");
        SearchBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButActionPerformed(evt);
            }
        });

        ClearBut.setText("Clear");
        ClearBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButActionPerformed(evt);
            }
        });

        jLabel2.setText("Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BackBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ExitBut))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addGap(52, 52, 52))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(AddBut, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(26, 26, 26)))
                                        .addComponent(ClearBut, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addGap(136, 136, 136)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(ICTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(PassportTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(ICLabel)
                                                        .addGap(250, 250, 250))
                                                    .addComponent(PassportLabel)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(101, 101, 101)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(NameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(VaccineType, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(VaccineCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(AppointTime, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(AppointDateChooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addGap(18, 18, 18)
                                        .addComponent(SearchBut, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CitizenshipTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(CitizenshipChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SelectBut)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(CitizenshipTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CitizenshipChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectBut))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ICTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ICLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PassportLabel)
                            .addComponent(PassportTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(SearchBut, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(VaccineType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(VaccineCentre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel4)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AppointDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AppointTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ExitBut)
                            .addComponent(BackBut)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ClearBut, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddBut, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ExitButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButActionPerformed
       System.exit(0);
    }//GEN-LAST:event_ExitButActionPerformed

    private void BackButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButActionPerformed
        this.setVisible(false);
        VaccineAppoint va = new VaccineAppoint();
        va.setVisible(true);
    }//GEN-LAST:event_BackButActionPerformed

    private void CitizenshipChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CitizenshipChoiceActionPerformed

    }//GEN-LAST:event_CitizenshipChoiceActionPerformed

    private void SelectButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectButActionPerformed
        String citizenship = CitizenshipChoice.getSelectedItem().toString();
        CitizenshipTxt.setText(citizenship);
        SearchBut.setVisible(true);
        if(citizenship.equals("Citizen"))
        {
            ICLabel.setVisible(true);
            ICTxt.setVisible(true);
            ICTxt.revalidate();
            ICTxt.repaint();
            PassportTxt.setVisible(false);
            PassportLabel.setVisible(false);
        }
        else if(citizenship.equals("Non-Citizen"))
        {
            PassportLabel.setVisible(true);
            PassportTxt.setVisible(true);
            PassportTxt.revalidate();
            PassportTxt.repaint();
            ICLabel.setVisible(false);
            ICTxt.setVisible(false);
        }
    }//GEN-LAST:event_SelectButActionPerformed

    private void ClearButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButActionPerformed
        CitizenshipTxt.setText("");
        ICTxt.setText("");
        PassportTxt.setText("");
        NameTxt.setText("");
        AppointDateChooser.setCalendar(null);
        ICTxt.setVisible(false);
        ICLabel.setVisible(false);
        SearchBut.setVisible(false);
        PassportLabel.setVisible(false);
        PassportTxt.setVisible(false);
    }//GEN-LAST:event_ClearButActionPerformed

    private void SearchButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButActionPerformed
        String citizenship = CitizenshipTxt.getText();
        int flag=0;
        if(citizenship.equals("Citizen"))
        {
            try
            {
                File fpeople = new File("PeopleCitizen.txt");
                Scanner s = new Scanner(fpeople);
                String IC = ICTxt.getText();   // Get ic within the ictxt field 
                while(s.hasNext())
                {
                    String details = s.nextLine();
                    String[] info = details.split(","); // splitting the string into the string array based on the given delimiter
                    if(info[1].equals(IC))
                    {
                        NameTxt.setText(info[0]);
                        flag =1;
                        break;
                    }
                }
                if(flag==0)
                {
                    JOptionPane.showMessageDialog(this,"People not yet registered","Details not found",JOptionPane.INFORMATION_MESSAGE); // Validation
                    ICTxt.setText("");
                }
            }
            catch(FileNotFoundException fe)
            {
                JOptionPane.showMessageDialog(this,"File not found","file error",JOptionPane.WARNING_MESSAGE); // Validation
            }
            catch(Exception e)
            {
                System.out.println("Error");        // Validation
            }
        }
        else
        {
            try
            {
                File fpeople = new File("PeopleNonCitizen.txt");
                Scanner s = new Scanner(fpeople);
                String passport = PassportTxt.getText();
                while(s.hasNext())
                {
                    String details = s.nextLine();
                    String[] info = details.split(","); // splitting the string into the string array based on the  given delimiter
                    if(info[1].equals(passport))
                    {
                        NameTxt.setText(info[0]);
                        flag =1;
                        break;
                    }
                }
                if(flag==0)
                {
                    JOptionPane.showMessageDialog(this,"People not yet registered","Details not found",JOptionPane.INFORMATION_MESSAGE); // Validation
                    ICTxt.setText("");
                }
                
            }
            catch(FileNotFoundException fe)
            {
                JOptionPane.showMessageDialog(this,"File not found","file error",JOptionPane.WARNING_MESSAGE); // Validation
            }
            catch(Exception e)
            {
                System.out.println("Error");            // Validation
            }
        }
    }//GEN-LAST:event_SearchButActionPerformed

    private void AddButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButActionPerformed
        try
        {
            
            String name = NameTxt.getText().trim();  // Trim to eliminate the spaces before and after
            String IC = ICTxt.getText().trim();
            String passport = PassportTxt.getText().trim();
            String date = ((JTextField)AppointDateChooser.getDateEditor().getUiComponent()).getText();
            String type = VaccineType.getSelectedItem().toString();
            String centre = VaccineCentre.getSelectedItem().toString();
            String time = AppointTime.getSelectedItem().toString(); 
            String citizenship = CitizenshipTxt.getText().trim();
            int flag=0;
            
            if(citizenship.equals("Citizen"))       // if status is citizen then citizen method
            {
                try
                {
                    File fpeople1 = new File("CitizenAppoint.txt");
                    Scanner s1 = new Scanner(fpeople1);
                }
                catch(FileNotFoundException fne)
                {
                    PrintWriter pw1 = new PrintWriter("CitizenAppoint.txt");
                    pw1.print("");
                    pw1.close(); 
                }
                File fpeople = new File("CitizenAppoint.txt");
                Scanner s = new Scanner(fpeople);
                
                while(s.hasNext())
                {
                    String details = s.nextLine();
                    if(details.contains(IC)) // check if substring is found within the string
                        flag=1;
                }
                try (PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter("CitizenAppoint.txt",true))))
                {
                    if(name.equals(""))
                        JOptionPane.showMessageDialog(this,"People not registered","Details not found",JOptionPane.INFORMATION_MESSAGE);
                    else if(flag==1)
                    {
                        JOptionPane.showMessageDialog(this,"User already Registered for Appointment","Registration fail",JOptionPane.INFORMATION_MESSAGE);
                    }
                    else
                    {
                        pw.println(name+","+IC+","+date+","+time+","+type+","+centre);
                        pw.close();
                        JOptionPane.showMessageDialog(this,"Sucessfully Registered Appointment Detail","Successfull Message",JOptionPane.PLAIN_MESSAGE);
                        NameTxt.setText("");
                        ICTxt.setText("");
                        AppointDateChooser.setCalendar(null);
                        ICLabel.setVisible(false);
                        ICTxt.setVisible(false);                // Validation
                    }
                }
                catch(IOException ioe)
                {
                    System.out.println("IO exception");         // Validation
                }
            }
            else
            {
                try
                {
                    File fpeople2 = new File("NonCitizenAppoint.txt");
                    Scanner s2 = new Scanner(fpeople2);
                }
                catch(FileNotFoundException fne)
                {
                    PrintWriter pw1 = new PrintWriter("NonCitizenAppoint.txt");
                    pw1.print("");
                    pw1.close(); 
                }
                File fpeople = new File("NonCitizenAppoint.txt");       // To start scan
                Scanner s = new Scanner(fpeople);
                
                while(s.hasNext())                  // While loop to go through lines within file
                {
                    String details = s.nextLine();
                    if(details.contains(passport))          // searched for passport within file
                        flag=1;
                }
                 try (PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter("NonCitizenAppoint.txt",true))))
                {
                    if(name.equals(""))
                        JOptionPane.showMessageDialog(this,"People not registered","Details not found",JOptionPane.INFORMATION_MESSAGE);
                    else if(flag==1)
                        JOptionPane.showMessageDialog(this,"User already Registered","Registration fail",JOptionPane.INFORMATION_MESSAGE);
                    else
                    {
                        pw.println(name+","+passport+","+date+","+time+","+type+","+centre);
                        pw.close();
                        JOptionPane.showMessageDialog(this,"Sucessfully Registered Appointment Detail","Successfull Message",JOptionPane.PLAIN_MESSAGE);
                        NameTxt.setText("");
                        PassportTxt.setText("");
                        AppointDateChooser.setCalendar(null);       // Validation
                        PassportLabel.setVisible(false);
                        PassportTxt.setVisible(false);
                    }
                }
                catch(FileNotFoundException fe2)
                {
                    PrintWriter pw2 = new PrintWriter("NonCitizenAppoint.txt");
                    pw2.print("");
                    pw2.close();
                }
                catch(IOException ioe)
                {
                    System.out.println("IO exception");
                }
            }
        }
        catch(FileNotFoundException fe3)
        {
            System.out.println("file not found");
        }
        catch(Exception e)
        {
            System.out.println("error");
        }
    }//GEN-LAST:event_AddButActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddVaccineAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddVaccineAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddVaccineAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddVaccineAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddVaccineAppointment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBut;
    private com.toedter.calendar.JDateChooser AppointDateChooser;
    private javax.swing.JComboBox<String> AppointTime;
    private javax.swing.JButton BackBut;
    private javax.swing.JComboBox<String> CitizenshipChoice;
    private javax.swing.JTextField CitizenshipTxt;
    private javax.swing.JButton ClearBut;
    private javax.swing.JButton ExitBut;
    private javax.swing.JLabel ICLabel;
    private javax.swing.JTextField ICTxt;
    private javax.swing.JTextField NameTxt;
    private javax.swing.JLabel PassportLabel;
    private javax.swing.JTextField PassportTxt;
    private javax.swing.JButton SearchBut;
    private javax.swing.JButton SelectBut;
    private javax.swing.JComboBox<String> VaccineCentre;
    private javax.swing.JComboBox<String> VaccineType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    // End of variables declaration//GEN-END:variables
}
